program = _{ SOI ~ statements_stream ~ EOI }
statements_stream = _{ NEWLINE* ~ (statement ~ NEWLINE+ | statement ~ EOI)* ~ NEWLINE* }

WHITESPACE = _{ " " | "\t" }
COMMENT = _{ 
  "//" ~ (!NEWLINE ~ ANY)*
  | "/*" ~ (!"*/" ~ ANY)* ~ "*/"
}

statement = { 
  if_statement | while_statement | for_statement | function_definition |
  define_and_set_statement | define_statement | set_statement |
  expression
}
block = { "{" ~ statements_stream ~ "}" }

if_statement = { 
  "if" ~ expression ~ NEWLINE* ~ statement ~ 
  (NEWLINE* ~ "else if" ~ expression ~ NEWLINE* ~ statement)* ~
  (NEWLINE* ~ "else" ~ NEWLINE* ~ statement)? |

  "if" ~ expression ~ NEWLINE* ~ statement 
}

while_statement = { "while" ~ expression ~ NEWLINE* ~ statement }
for_statement = { 
  "for" ~ "(" ~
  statement ~ ";" ~ expression ~ ";" ~ statement ~ 
  ")" ~ NEWLINE* ~ statement
}

function_definition = {
  "fn" ~ identifier ~ function_args ~ statement
}
function_args = { "(" ~ ")" | "(" ~ identifier ~ ("," ~ identifier)* ~ ","? ~ ")" }

define_keyword = _{ "let" }
set_statement = { identifier ~ "=" ~ expression }
define_statement = { define_keyword ~ identifier }
define_and_set_statement = { 
  define_keyword ~ identifier ~ "=" ~ expression | 
  identifier ~ ":=" ~ expression
}

number = @{ hexdecimal | binary | float | int | nan | infinity }
hexdecimal = @{ "0x" ~ ASCII_HEX_DIGIT+ }
binary = @{ "0b" ~ ASCII_BIN_DIGIT+ }
int = @{ ASCII_DIGIT+ }
float = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
nan = @{ "nan" }
infinity = @{ "inf" }

identifier = @{ (ASCII_ALPHANUMERIC | "_")+ }

string_quotes = { "\"" | "'" }
string = @{ PUSH(string_quotes) ~ (("\\" | !PEEK) ~ ANY)*~ POP }

boolean = { "true" | "false" }
nil = { "nil" }
value = { number | string | boolean | nil | closure }

closure_args = { "|" ~ "|" | "|" ~ identifier  ~ ("," ~ identifier)* ~ ","? ~ "|" } 
closure = { closure_args ~ expression }

expression = { fixed_primary ~ (infix ~ fixed_primary)* }
primary = _{ function_call | map | value | identifier | block | "(" ~ expression ~ ")" }
fixed_primary = _{ prefix? ~ primary ~ postfix? }

function_call = { identifier ~ ("(" ~ expression ~ ("," ~ expression)* ~ ")" | "(" ~ ")") }

map = { 
  "map" ~ expression ~ NEWLINE* ~ "{" ~ NEWLINE+ ~ 
  (map_cases ~ "=>" ~ expression ~ NEWLINE+)+ ~ "}" 
}
map_cases = {
  expression ~ ("|" ~ expression)*
}

infix = _{ 
  and | or |
  eq | neq | lte | gte | lt | gt | 
  add | sub | mul | div
}
add = { "+" }
sub = { "-" }
mul = { "*" }
div = { "/" }
eq = { "==" }
neq = { "!=" }
lt = { "<" }
gt = { ">" }
lte = { "<=" }
gte = { ">=" }
and = { "&&" }
or = { "||" }

prefix = _{ negate }
negate = { "-" }

postfix = _{ debug | print }
debug = @{ "?" ~ "?"+ }
print = @{ "?" }
