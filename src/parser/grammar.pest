program = _{ SOI ~ statements_stream ~ EOI }
statements_stream = _{ NEWLINE* ~ (statement ~ NEWLINE+ | statement ~ EOI)* ~ NEWLINE* }

WHITESPACE = _{ " " | "\t" }
COMMENT = _{ 
  "//" ~ (!NEWLINE ~ ANY)*
  | "/*" ~ (!"*/" ~ ANY)* ~ "*/"
}

statement = { 
  while_statement | for_statement | function_definition |
  define_and_set_statement | define_statement | set_statement |
  expression
}
block = { "{" ~ statements_stream ~ "}" }

while_statement = { "while" ~ expression ~ NEWLINE* ~ statement }
for_statement = { 
  "for" ~ "(" ~
  statement ~ ";" ~ expression ~ ";" ~ statement ~ 
  ")" ~ NEWLINE* ~ statement
}

function_definition = {
  "fn" ~ identifier ~ function_args ~ statement
}
function_args = { "(" ~ ")" | "(" ~ identifier ~ ("," ~ identifier)* ~ ","? ~ ")" }

define_keyword = _{ "let" }
define_statement = { define_keyword ~ identifier }
define_and_set_statement = { 
  define_keyword ~ identifier ~ "=" ~ expression | 
  identifier ~ ":=" ~ expression
}

set_statement = { identifier ~ set_op ~ expression }
set_op = { set | increment | decrement }
set = { "=" }
increment = { "+=" }
decrement = { "-=" }

number = @{ hexdecimal | binary | float | int | nan | infinity }
hexdecimal = @{ "0x" ~ ASCII_HEX_DIGIT+ }
binary = @{ "0b" ~ ASCII_BIN_DIGIT+ }
int = @{ ASCII_DIGIT+ }
float = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
nan = @{ "nan" }
infinity = @{ "inf" }

identifier = @{ (ASCII_ALPHANUMERIC | "_")+ }

string_quotes = { "\"" | "'" }
string = @{ PUSH(string_quotes) ~ (("\\" | !PEEK) ~ ANY)*~ POP }

boolean = { "true" | "false" }
nil = { "nil" }
value = { number | string | boolean | nil | closure }

closure_args = { "|" ~ "|" | "|" ~ identifier  ~ ("," ~ identifier)* ~ ","? ~ "|" } 
closure = { closure_args ~ expression }

expression = { fixed_primary ~ (infix ~ fixed_primary)* }
primary = _{ 
  if_expr | table |
  function_call | map | value |
  identifier | block | array |
  "(" ~ expression ~ ")"
}
fixed_primary = _{ prefix* ~ primary ~ postfix* }


if_expr = { 
  "if" ~ expression ~ NEWLINE* ~ statement ~ 
  (NEWLINE* ~ "else if" ~ expression ~ NEWLINE* ~ statement)* ~
  (NEWLINE* ~ "else" ~ NEWLINE* ~ statement)?
}

array = { 
  "[" ~ "]" | 
  "[" ~ expression ~ ("," ~ expression)* ~ ","? ~ "]"
}

table = {
  "{" ~ "}" | 
  "{" ~ identifier ~ ":" ~ expression ~ ("," ~ identifier ~ ":" ~ expression)* ~ ","? ~ "}"
}

function_call = { identifier ~ ("(" ~ expression ~ ("," ~ expression)* ~ ")" | "(" ~ ")") }

map = { 
  "map" ~ expression ~ NEWLINE* ~ "{" ~ NEWLINE+ ~ 
  (map_cases ~ "=>" ~ expression ~ NEWLINE+)+ ~ "}" 
}
map_cases = {
  expression ~ ("|" ~ expression)*
}

infix = _{ 
  and | or |
  eq | neq | lte | gte | lt | gt | 
  inclusive_range | exclusive_range | 
  add | sub | mul | div |
  double_dollar | dollar
}
add = { "+" }
sub = { "-" }
mul = { "*" }
div = { "/" }
eq = { "==" }
neq = { "!=" }
lt = { "<" }
gt = { ">" }
lte = { "<=" }
gte = { ">=" }
and = { "&&" }
or = { "||" }
dollar = { "$" }
double_dollar = { "$$" }
exclusive_range = { ".." }
inclusive_range = { "..." }

prefix = _{ 
  negate | not |
  triple_hash | double_hash | hash 
}
negate = { "-" }
not = { "!" }
hash = { "#" }
double_hash = { "##" }
triple_hash = { "###" }

postfix = _{ debug | print | index | dot_index }
debug = @{ "?" ~ "?"+ }
print = @{ "?" }
index = { "[" ~ expression ~ "]" }
dot_index = { "." ~ identifier }

